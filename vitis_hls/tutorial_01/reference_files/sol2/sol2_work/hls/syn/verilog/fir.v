// ==============================================================
// Generated by Vitis HLS v2024.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2024_1_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=243,HLS_SYN_LUT=199,HLS_VERSION=2024_1_1}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        c_address0,
        c_ce0,
        c_q0,
        x
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
output  [3:0] c_address0;
output   c_ce0;
input  [31:0] c_q0;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] shift_reg_address0;
wire   [31:0] shift_reg_q1;
wire   [0:0] tmp_fu_146_p3;
reg   [0:0] tmp_reg_229;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln11_fu_154_p1;
reg   [63:0] zext_ln11_reg_233;
wire   [0:0] icmp_ln12_fu_163_p2;
reg   [0:0] icmp_ln12_reg_238;
reg    ap_enable_reg_pp0_iter1;
reg  signed [31:0] c_load_reg_257;
wire   [31:0] mul_ln19_fu_128_p2;
reg   [31:0] mul_ln19_reg_262;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire  signed [31:0] ap_phi_reg_pp0_iter0_data_1_reg_119;
reg  signed [31:0] ap_phi_reg_pp0_iter1_data_1_reg_119;
reg  signed [31:0] ap_phi_reg_pp0_iter2_data_1_reg_119;
wire   [63:0] zext_ln16_fu_175_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] acc_fu_58;
wire   [31:0] acc_1_fu_194_p2;
wire    ap_CS_fsm_state6;
reg   [4:0] i_fu_62;
wire   [4:0] add_ln11_fu_180_p2;
reg    shift_reg_ce1_local;
reg   [3:0] shift_reg_address1_local;
reg    shift_reg_we1_local;
reg    shift_reg_we0_local;
reg    shift_reg_ce0_local;
reg    c_ce0_local;
wire   [3:0] trunc_ln11_fu_159_p1;
wire   [3:0] add_ln16_fu_169_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_113;
reg    ap_condition_81;
reg    ap_condition_134;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 acc_fu_58 = 32'd0;
#0 i_fu_62 = 5'd0;
end

fir_shift_reg_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0_local),
    .we0(shift_reg_we0_local),
    .d0(shift_reg_q1),
    .address1(shift_reg_address1_local),
    .ce1(shift_reg_ce1_local),
    .we1(shift_reg_we1_local),
    .d1(x),
    .q1(shift_reg_q1)
);

fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(c_load_reg_257),
    .din1(ap_phi_reg_pp0_iter2_data_1_reg_119),
    .dout(mul_ln19_fu_128_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        acc_fu_58 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        acc_fu_58 <= acc_1_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_113)) begin
        if (((icmp_ln12_fu_163_p2 == 1'd1) & (tmp_fu_146_p3 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_data_1_reg_119 <= x;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_data_1_reg_119 <= ap_phi_reg_pp0_iter0_data_1_reg_119;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_81)) begin
        if (((icmp_ln12_reg_238 == 1'd0) & (tmp_reg_229 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_data_1_reg_119 <= shift_reg_q1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_data_1_reg_119 <= ap_phi_reg_pp0_iter1_data_1_reg_119;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_62 <= 5'd10;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_146_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_62 <= add_ln11_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_load_reg_257 <= c_q0;
        icmp_ln12_reg_238 <= icmp_ln12_fu_163_p2;
        tmp_reg_229 <= i_fu_62[32'd4];
        zext_ln11_reg_233[4 : 0] <= zext_ln11_fu_154_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        mul_ln19_reg_262 <= mul_ln19_fu_128_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((tmp_fu_146_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_ce0_local = 1'b1;
    end else begin
        c_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_134)) begin
        if ((icmp_ln12_fu_163_p2 == 1'd1)) begin
            shift_reg_address1_local = 4'd0;
        end else if ((icmp_ln12_fu_163_p2 == 1'd0)) begin
            shift_reg_address1_local = zext_ln16_fu_175_p1;
        end else begin
            shift_reg_address1_local = 'bx;
        end
    end else begin
        shift_reg_address1_local = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_ce0_local = 1'b1;
    end else begin
        shift_reg_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln12_fu_163_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_146_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln12_fu_163_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_146_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        shift_reg_ce1_local = 1'b1;
    end else begin
        shift_reg_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln12_reg_238 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_229 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_we0_local = 1'b1;
    end else begin
        shift_reg_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln12_fu_163_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_146_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_we1_local = 1'b1;
    end else begin
        shift_reg_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_fu_146_p3 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_fu_146_p3 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_194_p2 = (mul_ln19_reg_262 + acc_fu_58);

assign add_ln11_fu_180_p2 = ($signed(i_fu_62) + $signed(5'd31));

assign add_ln16_fu_169_p2 = ($signed(trunc_ln11_fu_159_p1) + $signed(4'd15));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_113 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_134 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (tmp_fu_146_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_81 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_data_1_reg_119 = 'bx;

assign c_address0 = zext_ln11_fu_154_p1;

assign c_ce0 = c_ce0_local;

assign icmp_ln12_fu_163_p2 = ((i_fu_62 == 5'd0) ? 1'b1 : 1'b0);

assign shift_reg_address0 = zext_ln11_reg_233;

assign tmp_fu_146_p3 = i_fu_62[32'd4];

assign trunc_ln11_fu_159_p1 = i_fu_62[3:0];

assign y = acc_fu_58;

assign zext_ln11_fu_154_p1 = i_fu_62;

assign zext_ln16_fu_175_p1 = add_ln16_fu_169_p2;

always @ (posedge ap_clk) begin
    zext_ln11_reg_233[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //fir
